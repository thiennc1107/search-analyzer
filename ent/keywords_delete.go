// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/keywords"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// KeywordsDelete is the builder for deleting a Keywords entity.
type KeywordsDelete struct {
	config
	hooks    []Hook
	mutation *KeywordsMutation
}

// Where appends a list predicates to the KeywordsDelete builder.
func (kd *KeywordsDelete) Where(ps ...predicate.Keywords) *KeywordsDelete {
	kd.mutation.Where(ps...)
	return kd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (kd *KeywordsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, kd.sqlExec, kd.mutation, kd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (kd *KeywordsDelete) ExecX(ctx context.Context) int {
	n, err := kd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (kd *KeywordsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(keywords.Table, sqlgraph.NewFieldSpec(keywords.FieldID, field.TypeInt))
	if ps := kd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, kd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	kd.mutation.done = true
	return affected, err
}

// KeywordsDeleteOne is the builder for deleting a single Keywords entity.
type KeywordsDeleteOne struct {
	kd *KeywordsDelete
}

// Where appends a list predicates to the KeywordsDelete builder.
func (kdo *KeywordsDeleteOne) Where(ps ...predicate.Keywords) *KeywordsDeleteOne {
	kdo.kd.mutation.Where(ps...)
	return kdo
}

// Exec executes the deletion query.
func (kdo *KeywordsDeleteOne) Exec(ctx context.Context) error {
	n, err := kdo.kd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{keywords.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (kdo *KeywordsDeleteOne) ExecX(ctx context.Context) {
	if err := kdo.Exec(ctx); err != nil {
		panic(err)
	}
}
