// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/keywords"
)

// Keywords is the model entity for the Keywords schema.
type Keywords struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status keywords.Status `json:"status,omitempty"`
	// AdsAmount holds the value of the "ads_amount" field.
	AdsAmount int `json:"ads_amount,omitempty"`
	// Links holds the value of the "links" field.
	Links int `json:"links,omitempty"`
	// SearchResultAmount holds the value of the "search_result_amount" field.
	SearchResultAmount int `json:"search_result_amount,omitempty"`
	// HTMLCode holds the value of the "html_code" field.
	HTMLCode     int `json:"html_code,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Keywords) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case keywords.FieldID, keywords.FieldAdsAmount, keywords.FieldLinks, keywords.FieldSearchResultAmount, keywords.FieldHTMLCode:
			values[i] = new(sql.NullInt64)
		case keywords.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Keywords fields.
func (k *Keywords) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case keywords.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			k.ID = int(value.Int64)
		case keywords.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				k.Status = keywords.Status(value.String)
			}
		case keywords.FieldAdsAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ads_amount", values[i])
			} else if value.Valid {
				k.AdsAmount = int(value.Int64)
			}
		case keywords.FieldLinks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field links", values[i])
			} else if value.Valid {
				k.Links = int(value.Int64)
			}
		case keywords.FieldSearchResultAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field search_result_amount", values[i])
			} else if value.Valid {
				k.SearchResultAmount = int(value.Int64)
			}
		case keywords.FieldHTMLCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field html_code", values[i])
			} else if value.Valid {
				k.HTMLCode = int(value.Int64)
			}
		default:
			k.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Keywords.
// This includes values selected through modifiers, order, etc.
func (k *Keywords) Value(name string) (ent.Value, error) {
	return k.selectValues.Get(name)
}

// Update returns a builder for updating this Keywords.
// Note that you need to call Keywords.Unwrap() before calling this method if this Keywords
// was returned from a transaction, and the transaction was committed or rolled back.
func (k *Keywords) Update() *KeywordsUpdateOne {
	return NewKeywordsClient(k.config).UpdateOne(k)
}

// Unwrap unwraps the Keywords entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (k *Keywords) Unwrap() *Keywords {
	_tx, ok := k.config.driver.(*txDriver)
	if !ok {
		panic("ent: Keywords is not a transactional entity")
	}
	k.config.driver = _tx.drv
	return k
}

// String implements the fmt.Stringer.
func (k *Keywords) String() string {
	var builder strings.Builder
	builder.WriteString("Keywords(")
	builder.WriteString(fmt.Sprintf("id=%v, ", k.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", k.Status))
	builder.WriteString(", ")
	builder.WriteString("ads_amount=")
	builder.WriteString(fmt.Sprintf("%v", k.AdsAmount))
	builder.WriteString(", ")
	builder.WriteString("links=")
	builder.WriteString(fmt.Sprintf("%v", k.Links))
	builder.WriteString(", ")
	builder.WriteString("search_result_amount=")
	builder.WriteString(fmt.Sprintf("%v", k.SearchResultAmount))
	builder.WriteString(", ")
	builder.WriteString("html_code=")
	builder.WriteString(fmt.Sprintf("%v", k.HTMLCode))
	builder.WriteByte(')')
	return builder.String()
}

// KeywordsSlice is a parsable slice of Keywords.
type KeywordsSlice []*Keywords
