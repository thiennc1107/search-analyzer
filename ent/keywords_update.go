// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/keywords"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// KeywordsUpdate is the builder for updating Keywords entities.
type KeywordsUpdate struct {
	config
	hooks    []Hook
	mutation *KeywordsMutation
}

// Where appends a list predicates to the KeywordsUpdate builder.
func (ku *KeywordsUpdate) Where(ps ...predicate.Keywords) *KeywordsUpdate {
	ku.mutation.Where(ps...)
	return ku
}

// SetKeyword sets the "keyword" field.
func (ku *KeywordsUpdate) SetKeyword(s string) *KeywordsUpdate {
	ku.mutation.SetKeyword(s)
	return ku
}

// SetNillableKeyword sets the "keyword" field if the given value is not nil.
func (ku *KeywordsUpdate) SetNillableKeyword(s *string) *KeywordsUpdate {
	if s != nil {
		ku.SetKeyword(*s)
	}
	return ku
}

// SetStatus sets the "status" field.
func (ku *KeywordsUpdate) SetStatus(k keywords.Status) *KeywordsUpdate {
	ku.mutation.SetStatus(k)
	return ku
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ku *KeywordsUpdate) SetNillableStatus(k *keywords.Status) *KeywordsUpdate {
	if k != nil {
		ku.SetStatus(*k)
	}
	return ku
}

// SetAdsAmount sets the "ads_amount" field.
func (ku *KeywordsUpdate) SetAdsAmount(i int) *KeywordsUpdate {
	ku.mutation.ResetAdsAmount()
	ku.mutation.SetAdsAmount(i)
	return ku
}

// SetNillableAdsAmount sets the "ads_amount" field if the given value is not nil.
func (ku *KeywordsUpdate) SetNillableAdsAmount(i *int) *KeywordsUpdate {
	if i != nil {
		ku.SetAdsAmount(*i)
	}
	return ku
}

// AddAdsAmount adds i to the "ads_amount" field.
func (ku *KeywordsUpdate) AddAdsAmount(i int) *KeywordsUpdate {
	ku.mutation.AddAdsAmount(i)
	return ku
}

// SetLinksAmount sets the "links_amount" field.
func (ku *KeywordsUpdate) SetLinksAmount(i int) *KeywordsUpdate {
	ku.mutation.ResetLinksAmount()
	ku.mutation.SetLinksAmount(i)
	return ku
}

// SetNillableLinksAmount sets the "links_amount" field if the given value is not nil.
func (ku *KeywordsUpdate) SetNillableLinksAmount(i *int) *KeywordsUpdate {
	if i != nil {
		ku.SetLinksAmount(*i)
	}
	return ku
}

// AddLinksAmount adds i to the "links_amount" field.
func (ku *KeywordsUpdate) AddLinksAmount(i int) *KeywordsUpdate {
	ku.mutation.AddLinksAmount(i)
	return ku
}

// SetSearchResultAmount sets the "search_result_amount" field.
func (ku *KeywordsUpdate) SetSearchResultAmount(i int) *KeywordsUpdate {
	ku.mutation.ResetSearchResultAmount()
	ku.mutation.SetSearchResultAmount(i)
	return ku
}

// SetNillableSearchResultAmount sets the "search_result_amount" field if the given value is not nil.
func (ku *KeywordsUpdate) SetNillableSearchResultAmount(i *int) *KeywordsUpdate {
	if i != nil {
		ku.SetSearchResultAmount(*i)
	}
	return ku
}

// AddSearchResultAmount adds i to the "search_result_amount" field.
func (ku *KeywordsUpdate) AddSearchResultAmount(i int) *KeywordsUpdate {
	ku.mutation.AddSearchResultAmount(i)
	return ku
}

// SetHTMLCode sets the "html_code" field.
func (ku *KeywordsUpdate) SetHTMLCode(s string) *KeywordsUpdate {
	ku.mutation.SetHTMLCode(s)
	return ku
}

// SetNillableHTMLCode sets the "html_code" field if the given value is not nil.
func (ku *KeywordsUpdate) SetNillableHTMLCode(s *string) *KeywordsUpdate {
	if s != nil {
		ku.SetHTMLCode(*s)
	}
	return ku
}

// Mutation returns the KeywordsMutation object of the builder.
func (ku *KeywordsUpdate) Mutation() *KeywordsMutation {
	return ku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KeywordsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ku.sqlSave, ku.mutation, ku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KeywordsUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KeywordsUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KeywordsUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ku *KeywordsUpdate) check() error {
	if v, ok := ku.mutation.Status(); ok {
		if err := keywords.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Keywords.status": %w`, err)}
		}
	}
	return nil
}

func (ku *KeywordsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ku.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(keywords.Table, keywords.Columns, sqlgraph.NewFieldSpec(keywords.FieldID, field.TypeInt))
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.Keyword(); ok {
		_spec.SetField(keywords.FieldKeyword, field.TypeString, value)
	}
	if value, ok := ku.mutation.Status(); ok {
		_spec.SetField(keywords.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ku.mutation.AdsAmount(); ok {
		_spec.SetField(keywords.FieldAdsAmount, field.TypeInt, value)
	}
	if value, ok := ku.mutation.AddedAdsAmount(); ok {
		_spec.AddField(keywords.FieldAdsAmount, field.TypeInt, value)
	}
	if value, ok := ku.mutation.LinksAmount(); ok {
		_spec.SetField(keywords.FieldLinksAmount, field.TypeInt, value)
	}
	if value, ok := ku.mutation.AddedLinksAmount(); ok {
		_spec.AddField(keywords.FieldLinksAmount, field.TypeInt, value)
	}
	if value, ok := ku.mutation.SearchResultAmount(); ok {
		_spec.SetField(keywords.FieldSearchResultAmount, field.TypeInt, value)
	}
	if value, ok := ku.mutation.AddedSearchResultAmount(); ok {
		_spec.AddField(keywords.FieldSearchResultAmount, field.TypeInt, value)
	}
	if value, ok := ku.mutation.HTMLCode(); ok {
		_spec.SetField(keywords.FieldHTMLCode, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keywords.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ku.mutation.done = true
	return n, nil
}

// KeywordsUpdateOne is the builder for updating a single Keywords entity.
type KeywordsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KeywordsMutation
}

// SetKeyword sets the "keyword" field.
func (kuo *KeywordsUpdateOne) SetKeyword(s string) *KeywordsUpdateOne {
	kuo.mutation.SetKeyword(s)
	return kuo
}

// SetNillableKeyword sets the "keyword" field if the given value is not nil.
func (kuo *KeywordsUpdateOne) SetNillableKeyword(s *string) *KeywordsUpdateOne {
	if s != nil {
		kuo.SetKeyword(*s)
	}
	return kuo
}

// SetStatus sets the "status" field.
func (kuo *KeywordsUpdateOne) SetStatus(k keywords.Status) *KeywordsUpdateOne {
	kuo.mutation.SetStatus(k)
	return kuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (kuo *KeywordsUpdateOne) SetNillableStatus(k *keywords.Status) *KeywordsUpdateOne {
	if k != nil {
		kuo.SetStatus(*k)
	}
	return kuo
}

// SetAdsAmount sets the "ads_amount" field.
func (kuo *KeywordsUpdateOne) SetAdsAmount(i int) *KeywordsUpdateOne {
	kuo.mutation.ResetAdsAmount()
	kuo.mutation.SetAdsAmount(i)
	return kuo
}

// SetNillableAdsAmount sets the "ads_amount" field if the given value is not nil.
func (kuo *KeywordsUpdateOne) SetNillableAdsAmount(i *int) *KeywordsUpdateOne {
	if i != nil {
		kuo.SetAdsAmount(*i)
	}
	return kuo
}

// AddAdsAmount adds i to the "ads_amount" field.
func (kuo *KeywordsUpdateOne) AddAdsAmount(i int) *KeywordsUpdateOne {
	kuo.mutation.AddAdsAmount(i)
	return kuo
}

// SetLinksAmount sets the "links_amount" field.
func (kuo *KeywordsUpdateOne) SetLinksAmount(i int) *KeywordsUpdateOne {
	kuo.mutation.ResetLinksAmount()
	kuo.mutation.SetLinksAmount(i)
	return kuo
}

// SetNillableLinksAmount sets the "links_amount" field if the given value is not nil.
func (kuo *KeywordsUpdateOne) SetNillableLinksAmount(i *int) *KeywordsUpdateOne {
	if i != nil {
		kuo.SetLinksAmount(*i)
	}
	return kuo
}

// AddLinksAmount adds i to the "links_amount" field.
func (kuo *KeywordsUpdateOne) AddLinksAmount(i int) *KeywordsUpdateOne {
	kuo.mutation.AddLinksAmount(i)
	return kuo
}

// SetSearchResultAmount sets the "search_result_amount" field.
func (kuo *KeywordsUpdateOne) SetSearchResultAmount(i int) *KeywordsUpdateOne {
	kuo.mutation.ResetSearchResultAmount()
	kuo.mutation.SetSearchResultAmount(i)
	return kuo
}

// SetNillableSearchResultAmount sets the "search_result_amount" field if the given value is not nil.
func (kuo *KeywordsUpdateOne) SetNillableSearchResultAmount(i *int) *KeywordsUpdateOne {
	if i != nil {
		kuo.SetSearchResultAmount(*i)
	}
	return kuo
}

// AddSearchResultAmount adds i to the "search_result_amount" field.
func (kuo *KeywordsUpdateOne) AddSearchResultAmount(i int) *KeywordsUpdateOne {
	kuo.mutation.AddSearchResultAmount(i)
	return kuo
}

// SetHTMLCode sets the "html_code" field.
func (kuo *KeywordsUpdateOne) SetHTMLCode(s string) *KeywordsUpdateOne {
	kuo.mutation.SetHTMLCode(s)
	return kuo
}

// SetNillableHTMLCode sets the "html_code" field if the given value is not nil.
func (kuo *KeywordsUpdateOne) SetNillableHTMLCode(s *string) *KeywordsUpdateOne {
	if s != nil {
		kuo.SetHTMLCode(*s)
	}
	return kuo
}

// Mutation returns the KeywordsMutation object of the builder.
func (kuo *KeywordsUpdateOne) Mutation() *KeywordsMutation {
	return kuo.mutation
}

// Where appends a list predicates to the KeywordsUpdate builder.
func (kuo *KeywordsUpdateOne) Where(ps ...predicate.Keywords) *KeywordsUpdateOne {
	kuo.mutation.Where(ps...)
	return kuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kuo *KeywordsUpdateOne) Select(field string, fields ...string) *KeywordsUpdateOne {
	kuo.fields = append([]string{field}, fields...)
	return kuo
}

// Save executes the query and returns the updated Keywords entity.
func (kuo *KeywordsUpdateOne) Save(ctx context.Context) (*Keywords, error) {
	return withHooks(ctx, kuo.sqlSave, kuo.mutation, kuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KeywordsUpdateOne) SaveX(ctx context.Context) *Keywords {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KeywordsUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KeywordsUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kuo *KeywordsUpdateOne) check() error {
	if v, ok := kuo.mutation.Status(); ok {
		if err := keywords.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Keywords.status": %w`, err)}
		}
	}
	return nil
}

func (kuo *KeywordsUpdateOne) sqlSave(ctx context.Context) (_node *Keywords, err error) {
	if err := kuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(keywords.Table, keywords.Columns, sqlgraph.NewFieldSpec(keywords.FieldID, field.TypeInt))
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Keywords.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keywords.FieldID)
		for _, f := range fields {
			if !keywords.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != keywords.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kuo.mutation.Keyword(); ok {
		_spec.SetField(keywords.FieldKeyword, field.TypeString, value)
	}
	if value, ok := kuo.mutation.Status(); ok {
		_spec.SetField(keywords.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := kuo.mutation.AdsAmount(); ok {
		_spec.SetField(keywords.FieldAdsAmount, field.TypeInt, value)
	}
	if value, ok := kuo.mutation.AddedAdsAmount(); ok {
		_spec.AddField(keywords.FieldAdsAmount, field.TypeInt, value)
	}
	if value, ok := kuo.mutation.LinksAmount(); ok {
		_spec.SetField(keywords.FieldLinksAmount, field.TypeInt, value)
	}
	if value, ok := kuo.mutation.AddedLinksAmount(); ok {
		_spec.AddField(keywords.FieldLinksAmount, field.TypeInt, value)
	}
	if value, ok := kuo.mutation.SearchResultAmount(); ok {
		_spec.SetField(keywords.FieldSearchResultAmount, field.TypeInt, value)
	}
	if value, ok := kuo.mutation.AddedSearchResultAmount(); ok {
		_spec.AddField(keywords.FieldSearchResultAmount, field.TypeInt, value)
	}
	if value, ok := kuo.mutation.HTMLCode(); ok {
		_spec.SetField(keywords.FieldHTMLCode, field.TypeString, value)
	}
	_node = &Keywords{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keywords.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kuo.mutation.done = true
	return _node, nil
}
